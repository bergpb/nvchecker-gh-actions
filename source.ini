[__config__]
oldver = old_ver.txt
newver = new_ver.txt
; proxy = http://localhost:8888

[nvchecker]
github = lilydjwg/nvchecker
use_max_tag = true

[Django]
pypi = Django

[tornado]
pypi = tornado

[Metabase]
github = metabase/metabase
use_latest_release = true

[BorgBackup]
pypi = borgbackup

[Sentry]
pypi = sentry

[AriaNg]
github = mayswind/AriaNg
use_latest_release = true

[AriaNg-Native]
github = mayswind/AriaNg-Native
use_latest_release = true

[GitLab]
gitlab = gitlab-org/gitlab
use_max_tag = true

[GitLab-Release]
; gitlabhq/gitlabhq
; url = https://about.gitlab.com/security-releases.xml
; url = https://about.gitlab.com/releases.xml
cmd = curl -s https://about.gitlab.com/atom.xml | xq --raw-output '.feed.entry | map(select(.title|test("release:"; "i")))[0] | .title'

[Beancount]
pypi = beancount

[Jira]
# https://github.com/stedolan/jq/wiki/FAQ#general-questions
cmd = curl -s https://my.atlassian.com/download/feeds/current/jira-software.json | jq --raw-input --raw-output 'explode | .[1+index("("|explode): rindex(")"|explode)] | implode | fromjson | .[0].version'

[Confluence]
cmd = curl -s https://my.atlassian.com/download/feeds/current/confluence.json | jq --raw-input --raw-output 'explode | .[1+index("("|explode): rindex(")"|explode)] | implode | fromjson | .[0].version'

[UniFi-Network-Controller]
cmd = curl -s 'https://www.ui.com/download/?software=2451&eula=true' -H 'authority: www.ui.com' -H 'pragma: no-cache' -H 'cache-control: no-cache' -H 'x-requested-with: XMLHttpRequest' --compressed | jq --raw-output '.download_url | match("[\\d.]+").string'

[docker-openldap]
github = osixia/docker-openldap
use_latest_release = true

[docker-openldap-backup]
github = osixia/docker-openldap-backup
use_latest_release = true

[docker-phpLDAPadmin]
github = osixia/docker-phpLDAPadmin
use_latest_release = true

[docker-self-service-password]
github = tiredofit/docker-self-service-password
use_latest_release = true

[webhook]
github = adnanh/webhook
use_latest_release = true

[snell]
github = surge-networks/snell
use_latest_release = true

[docker-compose]
github = docker/compose
use_latest_release = true


; macOS Apps
[Google-Chrome-Stable]
; https://chromiumdash.appspot.com/releases?platform=Mac
; https://omahaproxy.appspot.com/history?os=mac;channel=stable
url = https://chromiumdash.appspot.com/fetch_releases?channel=Stable&platform=Mac&num=1
regex = "version": "([\d.]+)",

[Google-Chrome-Beta]
url = https://chromiumdash.appspot.com/fetch_releases?channel=Beta&platform=Mac&num=1
regex = "version": "([\d.]+)",

[Google-Chrome-Dev]
url = https://chromiumdash.appspot.com/fetch_releases?channel=Dev&platform=Mac&num=1
regex = "version": "([\d.]+)",

[Visual-Studio-Code]
; github = microsoft/vscode
; use_max_tag = true
cmd = curl -s https://update.code.visualstudio.com/api/update/darwin/stable/VERSION | jq --raw-output .productVersion

[Surge-Mac-Stable]
; cmd = curl -s https://www.nssurge.com/mac/v3/appcast-signed.xml | xq --raw-output '.rss.channel.item[0].enclosure | [."@sparkle:shortVersionString", ."@sparkle:version"] | join("-")'
sparkle = https://www.nssurge.com/mac/v3/appcast-signed.xml

[Surge-Mac-Beta]
sparkle = https://www.nssurge.com/mac/v3/appcast-signed-beta.xml

[Fork]
; cmd = curl -s https://git-fork.com/update/feed.xml | xq --raw-output '.rss.channel.item[0].enclosure | ."@sparkle:version"'
sparkle = https://git-fork.com/update/feed.xml

[Sketch]
sparkle = https://download.sketchapp.com/sketch-versions.xml

[iTerm2]
sparkle = https://iterm2.com/appcasts/final.xml

[Docker-for-Mac]
sparkle = https://download.docker.com/mac/stable/appcast.xml

[ForkLift]
sparkle = https://updates.binarynights.com/ForkLift3/update.xml

[Wechat-for-Mac]
sparkle = https://dldir1.qq.com/weixin/mac/mac-release.xml

[Navicat-Premium]
sparkle = https://updater.navicat.com/mac/navicat_updates.php?appName=Navicat%20Premium&appLang=en

[NeteaseMusic]
sparkle = https://music.163.com/api/mac/appcast.xml

[nvALT]
sparkle = https://updates.designheresy.com/nvalt/updates.xml

[Tower-for-Mac]
sparkle = https://updates.fournova.com/updates/tower3-mac/stable

[Typora]
sparkle = https://www.typora.io/download/dev_update.xml

[The-Unarchiver]
sparkle = https://s3-us-west-2.amazonaws.com/updateinfo.devmate.com/com.macpaw.site.theunarchiver/updates.xml

[TablePlus]
sparkle = https://tableplus.com/osx/version.xml

[Sublime-Text]
sparkle = https://www.sublimetext.com/updates/3/stable/appcast_osx.xml

[Marked-2]
sparkle = https://updates.marked2app.com/marked.xml

[Manico]
sparkle = https://manico.im/api/release_manager/im.manico.Manico.xml

[iMazing]
sparkle = https://downloads.imazing.com/com.DigiDNA.iMazing2Mac.xml

[IINA]
sparkle = https://iina.io/appcast.xml

[iExplorer]
sparkle = https://macroplant.com/iexplorer/mac/v4/appcast

[Hazel]
sparkle = https://www.noodlesoft.com/Products/Hazel/generate-appcast.php

[DEVONthink]
sparkle = https://api.devontechnologies.com/1/apps/sparkle/sparkle.php?id=300900000

[coconutBattery]
sparkle = https://coconut-flavour.com/updates/coconutBattery.xml

[CleanMyMac-X]
sparkle = https://s3-us-west-2.amazonaws.com/updateinfo.devmate.com/com.macpaw.CleanMyMac4/updates.xml

[Vorta-Backup-Client]
github = borgbase/vorta
use_latest_release = true

[Syncthing-for-macOS]
; github = syncthing/syncthing-macos
; use_latest_release = true
sparkle = https://upgrades.syncthing.net/syncthing-macos/appcast.xml

[Marked]
sparkle = https://updates.marked2app.com/marked.xml

[Kaleidoscope]
sparkle = https://appcasts.hypergiant.com/ks/prod/updates

[GoLand]
cmd = curl -s 'https://data.services.jetbrains.com/products/releases?code=GO&latest=true&type=release' | jq --raw-output '.GO[0] | [.version, .build] | join("-")'

[DataGrip]
cmd = curl -s 'https://data.services.jetbrains.com/products/releases?code=DG&latest=true&type=release' | jq --raw-output '.DG[0] | [.version, .build] | join("-")'

[PyCharm]
cmd = curl -s 'https://data.services.jetbrains.com/products/releases?code=PCP&latest=true&type=release' | jq --raw-output '.PCP[0] | [.version, .build] | join("-")'

[FilePane]
sparkle = https://updates.devmate.com/com.mymixapps.FilePane.xml

[Dash-for-macOS]
sparkle = https://kapeli.com/Dash5.xml

[CotEditor-Stable]
sparkle = https://coteditor.com/appcast.xml

[CotEditor-Beta]
sparkle = https://coteditor.com/appcast-beta.xml

[ClashX]
sparkle = https://yichengchen.github.io/clashX/appcast.xml

[WeChat-Work]
cmd = curl -ILs -o /dev/null -w %{url_effective} 'https://work.weixin.qq.com/wework_admin/commdownload?platform=mac' | grep -oP '.*\K(?<=_)[\d.]+(?=\.dmg)'

[Dropbox]
cmd = curl -ILs -o /dev/null -w %{url_effective} 'https://www.dropbox.com/download?plat=mac&full=1' | grep -oP '.*\K(?<=%20)[\d.]+(?=\.dmg)'

[iStat-Menus]
cmd = curl -ILs -o /dev/null -w %{url_effective} 'https://download.bjango.com/istatmenus/' | grep -oP '.*\K(?<=istatmenus)[\d.]+(?=\.zip)'

[Firefox]
; https://ftp.mozilla.org/pub/firefox/releases/latest/README.txt
cmd = curl -ILs -o /dev/null -w %{url_effective} 'https://download.mozilla.org/?product=firefox-latest-ssl&os=osx&lang=en-US' | grep -oP '.*\K(?<=releases\/)[\d.]+(?=\/mac)'

[Transmit]
cmd = curl -ILs -o /dev/null -w %{url_effective} 'https://download.panic.com/transmit/Transmit-5-Latest.zip' | grep -oP '.*\K(?<=%20)[\d.]+(?=\.zip)'

[Little-Snitch]
cmd = curl -s https://www.obdev.at/products/littlesnitch/releasenotes.html | pup 'h3#first-releasenotes-headline, h3#first-releasenotes-headline span.buildnumber json{}' | jq --raw-output '[.[0].text, .[1].text] | map(match("[\\d.]+").string) | join("-")'

[Burp-Suite]
cmd = curl -s https://portswigger.net/burp/releases/rss | xq --raw-output '.rss.channel.item | map(select(.title|test("Professional"; "i")))[0] | .title'

[aText]
sparkle = https://www.trankynam.com/atext/aText-Appcast.xml

[Royal-TSX]
sparkle = https://royaltsx-v4.royalapplications.com/updates_stable.php

[SourceTree]
sparkle = https://product-downloads.atlassian.com/software/sourcetree/Appcast/SparkleAppcastGroup0.xml

[Snipaste]
cmd = curl -ILs -o /dev/null -w %{url_effective} 'https://dl.snipaste.com/mac-beta' | grep -oP '.*\K(?<=Snipaste-)[\d.\-\w]+(?=\.dmg)'

[Setapp]
sparkle = https://s3-us-west-2.amazonaws.com/updateinfo.devmate.com/com.setapp.InstallSetapp/updates.xml

[QQ-for-Mac]
cmd = curl -s https://im.qq.com/proxy/domain/qzonestyle.gtimg.cn/qzone/qzactStatics/configSystem/data/1373/config1.js | grep -oP '.*\K(?<=QQ_)[\d.]+(?=\.dmg)'

[Notion]
# https://www.notion.so/desktop/mac/download&user_agent=MacOS
cmd = curl -s 'https://www.notion.so/api/v3/getDesktopDownloadUrl' -H 'pragma: no-cache' -H 'cache-control: no-cache' -H 'content-type: application/json' --data '{"platform":"mac"}' | jq --raw-output '.url' | grep -oP '.*\K(?<=-)[\d.]+(?=\.dmg)'

[MWeb]
sparkle = https://s3-us-west-2.amazonaws.com/updateinfo.devmate.com/com.coderforart.MWeb3/updates.xml

[Motrix]
github = agalwood/Motrix
use_latest_release = true

[Microsoft-Office]
; https://docs.microsoft.com/en-us/officeupdates/update-history-office-for-mac
; cmd = curl -s https://macadmins.software/latest.xml | xq --raw-output '.latest.package | map(select(.title|test("Office 365/2019 Suite Installer"; "i")))[0] | .version'
cmd = curl -ILs -o /dev/null -w %{url_effective} 'https://go.microsoft.com/fwlink/?linkid=525133' | grep -oP '.*\K(?<=Microsoft_Office_)[\d.]+(?=_Installer\.pkg)'

[1Password-for-Mac]
; https://app-updates.agilebits.com/product_history/OPM7
cmd = curl -ILs -o /dev/null -w %{url_effective} 'https://app-updates.agilebits.com/download/OPM7' | grep -oP '.*\K(?<=1Password-)[\d.]+(?=\.pkg)'

[Alfred]
url = https://www.alfredapp.com/app/update4/general.xml
regex = <string>([\d.]+)<\/string>

[Movist-Pro]
sparkle = https://s3.ap-northeast-2.amazonaws.com/update.cocoable.com/appcast.xml

[Arq-Backup]
cmd = curl -s https://www.arqbackup.com/download/arqbackup/arq6_release_notes.html | pup 'h1:nth-child(1)' | grep -oP '.*\K(?<= )[\d.]+(?=)'

[DaisyDisk]
cmd = curl -s 'https://daisydiskapp.com/downloads/appcastReleaseNotes.php?appEdition=Standard&osVersion=10.15' | pup 'div:nth-child(1) > h1' | grep -oP '.*\K(?<= )[\d.]+(?=)'


; Apple
; OS_NAME="macOS" REGEX=`printf '^%s (?:(?!beta).)*$' $OS_NAME` xq -n 'env.REGEX'
; https://ipsw.me/timeline.rss
; https://ipswdownloads.docs.apiary.io
; https://api.ineal.me/tss/docs
[macOS]
; cmd = curl -s https://developer.apple.com/news/releases/rss/releases.rss | xq --raw-output '.rss.channel.item | map(select(.title|test("^macOS (?:(?!beta).)*$"; "i")))[0] | .title'
cmd = curl -s https://developer.apple.com/news/releases/rss/releases.rss | OS_NAME="macOS" REGEX=`printf '^%s (?:(?!beta).)*$' $OS_NAME` xq --raw-output '.rss.channel.item | map(select(.title|test(env.REGEX; "i")))[0] | .title | ltrimstr(env.OS_NAME + " ")'

[macOS-Beta]
; cmd = curl -s https://developer.apple.com/news/releases/rss/releases.rss | xq --raw-output '.rss.channel.item | map(select(.title|test("macOS .+ beta "; "i")))[0] | .title'
cmd = curl -s https://developer.apple.com/news/releases/rss/releases.rss | OS_NAME="macOS" REGEX="$OS_NAME .+ beta " xq --raw-output '.rss.channel.item | map(select(.title|test(env.REGEX; "i")))[0] | .title | ltrimstr(env.OS_NAME + " ")'

[iOS]
cmd = curl -s https://developer.apple.com/news/releases/rss/releases.rss | OS_NAME="iOS" REGEX=`printf '^%s (?:(?!beta).)*$' $OS_NAME` xq --raw-output '.rss.channel.item | map(select(.title|test(env.REGEX; "i")))[0] | .title | ltrimstr(env.OS_NAME + " ")'

[iOS-Beta]
cmd = curl -s https://developer.apple.com/news/releases/rss/releases.rss | OS_NAME="iOS" REGEX="$OS_NAME .+ beta " xq --raw-output '.rss.channel.item | map(select(.title|test(env.REGEX; "i")))[0] | .title | ltrimstr(env.OS_NAME + " ")'

[iPadOS]
cmd = curl -s https://developer.apple.com/news/releases/rss/releases.rss | OS_NAME="iPadOS" REGEX=`printf '^%s (?:(?!beta).)*$' $OS_NAME` xq --raw-output '.rss.channel.item | map(select(.title|test(env.REGEX; "i")))[0] | .title | ltrimstr(env.OS_NAME + " ")'

[iPadOS-Beta]
cmd = curl -s https://developer.apple.com/news/releases/rss/releases.rss | OS_NAME="iPadOS" REGEX="$OS_NAME .+ beta " xq --raw-output '.rss.channel.item | map(select(.title|test(env.REGEX; "i")))[0] | .title | ltrimstr(env.OS_NAME + " ")'

[watchOS]
cmd = curl -s https://developer.apple.com/news/releases/rss/releases.rss | OS_NAME="watchOS" REGEX=`printf '^%s (?:(?!beta).)*$' $OS_NAME` xq --raw-output '.rss.channel.item | map(select(.title|test(env.REGEX; "i")))[0] | .title | ltrimstr(env.OS_NAME + " ")'

[watchOS-Beta]
cmd = curl -s https://developer.apple.com/news/releases/rss/releases.rss | OS_NAME="watchOS" REGEX="$OS_NAME .+ beta " xq --raw-output '.rss.channel.item | map(select(.title|test(env.REGEX; "i")))[0] | .title | ltrimstr(env.OS_NAME + " ")'

[tvOS]
cmd = curl -s https://developer.apple.com/news/releases/rss/releases.rss | OS_NAME="tvOS" REGEX=`printf '^%s (?:(?!beta).)*$' $OS_NAME` xq --raw-output '.rss.channel.item | map(select(.title|test(env.REGEX; "i")))[0] | .title | ltrimstr(env.OS_NAME + " ")'

[tvOS-Beta]
cmd = curl -s https://developer.apple.com/news/releases/rss/releases.rss | OS_NAME="tvOS" REGEX="$OS_NAME .+ beta " xq --raw-output '.rss.channel.item | map(select(.title|test(env.REGEX; "i")))[0] | .title | ltrimstr(env.OS_NAME + " ")'

[Xcode]
cmd = curl -s https://developer.apple.com/news/releases/rss/releases.rss | OS_NAME="Xcode" REGEX=`printf '^%s (?:(?!beta).)*$' $OS_NAME` xq --raw-output '.rss.channel.item | map(select(.title|test(env.REGEX; "i")))[0] | .title | ltrimstr(env.OS_NAME + " ")'

[Xcode-Beta]
cmd = curl -s https://developer.apple.com/news/releases/rss/releases.rss | OS_NAME="Xcode" REGEX="$OS_NAME .+ beta " xq --raw-output '.rss.channel.item | map(select(.title|test(env.REGEX; "i")))[0] | .title | ltrimstr(env.OS_NAME + " ")'
